
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Dec 21 18:17:55 CST 2013
//----------------------------------------------------

package smallc.parser;

import java.io.InputStream;
import smallc.parser.ast.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Dec 21 18:17:55 CST 2013
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\126\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\002\000\002\004\005\000\002\004\005" +
    "\000\002\005\003\000\002\005\005\000\002\005\002\000" +
    "\002\006\003\000\002\006\003\000\002\007\007\000\002" +
    "\007\004\000\002\010\003\000\002\010\002\000\002\011" +
    "\003\000\002\011\006\000\002\012\006\000\002\013\005" +
    "\000\002\013\003\000\002\013\002\000\002\014\004\000" +
    "\002\015\006\000\002\016\004\000\002\016\002\000\002" +
    "\017\004\000\002\017\003\000\002\017\005\000\002\017" +
    "\010\000\002\017\013\000\002\017\004\000\002\017\004" +
    "\000\002\020\004\000\002\020\002\000\002\021\004\000" +
    "\002\021\002\000\002\022\005\000\002\023\005\000\002" +
    "\023\003\000\002\024\003\000\002\024\005\000\002\025" +
    "\003\000\002\025\005\000\002\026\005\000\002\026\005" +
    "\000\002\026\005\000\002\026\005\000\002\026\005\000" +
    "\002\026\005\000\002\026\005\000\002\026\005\000\002" +
    "\026\005\000\002\026\005\000\002\026\005\000\002\026" +
    "\005\000\002\026\005\000\002\026\005\000\002\026\005" +
    "\000\002\026\005\000\002\026\005\000\002\026\005\000" +
    "\002\026\005\000\002\026\005\000\002\026\005\000\002" +
    "\026\005\000\002\026\005\000\002\026\005\000\002\026" +
    "\005\000\002\026\005\000\002\026\005\000\002\026\005" +
    "\000\002\026\004\000\002\026\004\000\002\026\004\000" +
    "\002\026\004\000\002\026\004\000\002\026\005\000\002" +
    "\026\006\000\002\026\004\000\002\026\005\000\002\026" +
    "\003\000\002\026\002\000\002\027\006\000\002\027\002" +
    "\000\002\030\005\000\002\030\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\247\000\010\002\ufffe\012\010\013\012\001\002\000" +
    "\004\002\000\001\002\000\006\014\ufff7\066\ufff7\001\002" +
    "\000\010\002\ufffe\012\010\013\012\001\002\000\006\014" +
    "\ufff9\066\171\001\002\000\006\023\ufff3\066\014\001\002" +
    "\000\004\002\013\001\002\000\006\014\ufff8\066\ufff8\001" +
    "\002\000\004\002\001\001\002\000\010\014\ufff5\023\ufff4" +
    "\066\ufff5\001\002\000\004\023\016\001\002\000\010\012" +
    "\010\013\012\024\uffde\001\002\000\136\004\uffde\006\uffde" +
    "\007\uffde\010\uffde\011\uffde\012\010\013\012\014\uffde\016" +
    "\uffde\017\uffde\023\uffde\024\uffde\025\uffde\026\uffde\027\uffde" +
    "\030\uffde\031\uffde\032\uffde\033\uffde\034\uffde\035\uffde\036" +
    "\uffde\037\uffde\040\uffde\041\uffde\042\uffde\043\uffde\044\uffde" +
    "\045\uffde\046\uffde\047\uffde\050\uffde\051\uffde\052\uffde\053" +
    "\uffde\054\uffde\055\uffde\057\uffde\060\uffde\061\uffde\062\uffde" +
    "\063\uffde\064\uffde\065\uffde\066\uffde\067\uffde\001\002\000" +
    "\004\024\166\001\002\000\004\066\022\001\002\000\014" +
    "\014\ufff2\015\ufff2\020\ufff2\021\ufff2\025\ufff2\001\002\000" +
    "\012\014\uffda\015\uffda\021\032\025\031\001\002\000\006" +
    "\014\uffdb\015\027\001\002\000\004\014\026\001\002\000" +
    "\136\004\uffdd\006\uffdd\007\uffdd\010\uffdd\011\uffdd\012\uffdd" +
    "\013\uffdd\014\uffdd\016\uffdd\017\uffdd\023\uffdd\024\uffdd\025" +
    "\uffdd\026\uffdd\027\uffdd\030\uffdd\031\uffdd\032\uffdd\033\uffdd" +
    "\034\uffdd\035\uffdd\036\uffdd\037\uffdd\040\uffdd\041\uffdd\042" +
    "\uffdd\043\uffdd\044\uffdd\045\uffdd\046\uffdd\047\uffdd\050\uffdd" +
    "\051\uffdd\052\uffdd\053\uffdd\054\uffdd\055\uffdd\057\uffdd\060" +
    "\uffdd\061\uffdd\062\uffdd\063\uffdd\064\uffdd\065\uffdd\066\uffdd" +
    "\067\uffdd\001\002\000\004\066\022\001\002\000\004\014" +
    "\uffdc\001\002\000\120\014\uffb0\015\uffb0\016\uffb0\017\035" +
    "\023\043\025\uffb0\026\uffb0\027\uffb0\030\uffb0\031\uffb0\032" +
    "\uffb0\033\uffb0\034\uffb0\035\uffb0\036\uffb0\037\uffb0\040\uffb0" +
    "\041\uffb0\042\uffb0\043\uffb0\044\uffb0\045\uffb0\046\uffb0\047" +
    "\037\050\uffb0\051\uffb0\052\042\053\uffb0\054\uffb0\055\uffb0" +
    "\057\047\060\040\061\uffb0\062\uffb0\063\uffb0\064\uffb0\065" +
    "\041\066\044\067\036\001\002\000\004\067\033\001\002" +
    "\000\004\022\034\001\002\000\014\014\ufff1\015\ufff1\020" +
    "\ufff1\021\ufff1\025\ufff1\001\002\000\114\016\uffb0\017\035" +
    "\020\uffb0\025\uffb0\026\uffb0\027\uffb0\030\uffb0\031\uffb0\032" +
    "\uffb0\033\uffb0\034\uffb0\035\uffb0\036\uffb0\037\uffb0\040\uffb0" +
    "\041\uffb0\042\uffb0\043\uffb0\044\uffb0\045\uffb0\046\uffb0\047" +
    "\037\050\uffb0\051\uffb0\052\042\053\uffb0\054\uffb0\055\uffb0" +
    "\057\047\060\040\061\uffb0\062\uffb0\063\uffb0\064\uffb0\065" +
    "\041\066\044\067\036\001\002\000\106\014\uffb1\015\uffb1" +
    "\016\uffb1\020\uffb1\022\uffb1\024\uffb1\025\uffb1\026\uffb1\027" +
    "\uffb1\030\uffb1\031\uffb1\032\uffb1\033\uffb1\034\uffb1\035\uffb1" +
    "\036\uffb1\037\uffb1\040\uffb1\041\uffb1\042\uffb1\043\uffb1\044" +
    "\uffb1\045\uffb1\046\uffb1\050\uffb1\051\uffb1\053\uffb1\054\uffb1" +
    "\055\uffb1\061\uffb1\062\uffb1\063\uffb1\064\uffb1\065\uffb1\001" +
    "\002\000\124\014\uffb0\015\uffb0\016\uffb0\017\035\020\uffb0" +
    "\022\uffb0\024\uffb0\025\uffb0\026\uffb0\027\uffb0\030\uffb0\031" +
    "\uffb0\032\uffb0\033\uffb0\034\uffb0\035\uffb0\036\uffb0\037\uffb0" +
    "\040\uffb0\041\uffb0\042\uffb0\043\uffb0\044\uffb0\045\uffb0\046" +
    "\uffb0\047\037\050\uffb0\051\uffb0\052\042\053\uffb0\054\uffb0" +
    "\055\uffb0\057\047\060\040\061\uffb0\062\uffb0\063\uffb0\064" +
    "\uffb0\065\041\066\044\067\036\001\002\000\124\014\uffb0" +
    "\015\uffb0\016\uffb0\017\035\020\uffb0\022\uffb0\024\uffb0\025" +
    "\uffb0\026\uffb0\027\uffb0\030\uffb0\031\uffb0\032\uffb0\033\uffb0" +
    "\034\uffb0\035\uffb0\036\uffb0\037\uffb0\040\uffb0\041\uffb0\042" +
    "\uffb0\043\uffb0\044\uffb0\045\uffb0\046\uffb0\047\037\050\uffb0" +
    "\051\uffb0\052\042\053\uffb0\054\uffb0\055\uffb0\057\047\060" +
    "\040\061\uffb0\062\uffb0\063\uffb0\064\uffb0\065\041\066\044" +
    "\067\036\001\002\000\124\014\uffb0\015\uffb0\016\uffb0\017" +
    "\035\020\uffb0\022\uffb0\024\uffb0\025\uffb0\026\uffb0\027\uffb0" +
    "\030\uffb0\031\uffb0\032\uffb0\033\uffb0\034\uffb0\035\uffb0\036" +
    "\uffb0\037\uffb0\040\uffb0\041\uffb0\042\uffb0\043\uffb0\044\uffb0" +
    "\045\uffb0\046\uffb0\047\037\050\uffb0\051\uffb0\052\042\053" +
    "\uffb0\054\uffb0\055\uffb0\057\047\060\040\061\uffb0\062\uffb0" +
    "\063\uffb0\064\uffb0\065\041\066\044\067\036\001\002\000" +
    "\124\014\uffb0\015\uffb0\016\uffb0\017\035\020\uffb0\022\uffb0" +
    "\024\uffb0\025\uffb0\026\uffb0\027\uffb0\030\uffb0\031\uffb0\032" +
    "\uffb0\033\uffb0\034\uffb0\035\uffb0\036\uffb0\037\uffb0\040\uffb0" +
    "\041\uffb0\042\uffb0\043\uffb0\044\uffb0\045\uffb0\046\uffb0\047" +
    "\037\050\uffb0\051\uffb0\052\042\053\uffb0\054\uffb0\055\uffb0" +
    "\057\047\060\040\061\uffb0\062\uffb0\063\uffb0\064\uffb0\065" +
    "\041\066\044\067\036\001\002\000\116\015\uffb0\016\uffb0" +
    "\017\035\024\uffb0\025\uffb0\026\uffb0\027\uffb0\030\uffb0\031" +
    "\uffb0\032\uffb0\033\uffb0\034\uffb0\035\uffb0\036\uffb0\037\uffb0" +
    "\040\uffb0\041\uffb0\042\uffb0\043\uffb0\044\uffb0\045\uffb0\046" +
    "\uffb0\047\037\050\uffb0\051\uffb0\052\042\053\uffb0\054\uffb0" +
    "\055\uffb0\057\047\060\040\061\uffb0\062\uffb0\063\uffb0\064" +
    "\uffb0\065\041\066\044\067\036\001\002\000\112\014\uffae" +
    "\015\uffae\016\uffae\017\143\020\uffae\021\145\022\uffae\024" +
    "\uffae\025\uffae\026\uffae\027\uffae\030\uffae\031\uffae\032\uffae" +
    "\033\uffae\034\uffae\035\uffae\036\uffae\037\uffae\040\uffae\041" +
    "\uffae\042\uffae\043\uffae\044\uffae\045\uffae\046\uffae\050\uffae" +
    "\051\uffae\053\uffae\054\uffae\055\uffae\061\uffae\062\uffae\063" +
    "\uffae\064\uffae\065\uffae\001\002\000\006\014\uffd9\015\uffd9" +
    "\001\002\000\100\014\uffd8\015\uffd8\016\076\025\061\026" +
    "\077\027\104\030\103\031\100\032\060\033\054\034\051" +
    "\035\063\036\066\037\073\040\070\041\075\042\062\043" +
    "\064\044\053\045\101\046\056\050\067\051\057\053\055" +
    "\054\102\055\071\061\105\062\072\063\052\064\074\065" +
    "\065\001\002\000\124\014\uffb0\015\uffb0\016\uffb0\017\035" +
    "\020\uffb0\022\uffb0\024\uffb0\025\uffb0\026\uffb0\027\uffb0\030" +
    "\uffb0\031\uffb0\032\uffb0\033\uffb0\034\uffb0\035\uffb0\036\uffb0" +
    "\037\uffb0\040\uffb0\041\uffb0\042\uffb0\043\uffb0\044\uffb0\045" +
    "\uffb0\046\uffb0\047\037\050\uffb0\051\uffb0\052\042\053\uffb0" +
    "\054\uffb0\055\uffb0\057\047\060\040\061\uffb0\062\uffb0\063" +
    "\uffb0\064\uffb0\065\041\066\044\067\036\001\002\000\106" +
    "\014\uffb8\015\uffb8\016\076\020\uffb8\022\uffb8\024\uffb8\025" +
    "\uffb8\026\uffb8\027\uffb8\030\uffb8\031\uffb8\032\uffb8\033\uffb8" +
    "\034\uffb8\035\uffb8\036\uffb8\037\uffb8\040\uffb8\041\uffb8\042" +
    "\uffb8\043\uffb8\044\uffb8\045\uffb8\046\uffb8\050\uffb8\051\uffb8" +
    "\053\uffb8\054\uffb8\055\uffb8\061\uffb8\062\uffb8\063\uffb8\064" +
    "\uffb8\065\uffb8\001\002\000\124\014\uffb0\015\uffb0\016\uffb0" +
    "\017\035\020\uffb0\022\uffb0\024\uffb0\025\uffb0\026\uffb0\027" +
    "\uffb0\030\uffb0\031\uffb0\032\uffb0\033\uffb0\034\uffb0\035\uffb0" +
    "\036\uffb0\037\uffb0\040\uffb0\041\uffb0\042\uffb0\043\uffb0\044" +
    "\uffb0\045\uffb0\046\uffb0\047\037\050\uffb0\051\uffb0\052\042" +
    "\053\uffb0\054\uffb0\055\uffb0\057\047\060\040\061\uffb0\062" +
    "\uffb0\063\uffb0\064\uffb0\065\041\066\044\067\036\001\002" +
    "\000\124\014\uffb0\015\uffb0\016\uffb0\017\035\020\uffb0\022" +
    "\uffb0\024\uffb0\025\uffb0\026\uffb0\027\uffb0\030\uffb0\031\uffb0" +
    "\032\uffb0\033\uffb0\034\uffb0\035\uffb0\036\uffb0\037\uffb0\040" +
    "\uffb0\041\uffb0\042\uffb0\043\uffb0\044\uffb0\045\uffb0\046\uffb0" +
    "\047\037\050\uffb0\051\uffb0\052\042\053\uffb0\054\uffb0\055" +
    "\uffb0\057\047\060\040\061\uffb0\062\uffb0\063\uffb0\064\uffb0" +
    "\065\041\066\044\067\036\001\002\000\124\014\uffb0\015" +
    "\uffb0\016\uffb0\017\035\020\uffb0\022\uffb0\024\uffb0\025\uffb0" +
    "\026\uffb0\027\uffb0\030\uffb0\031\uffb0\032\uffb0\033\uffb0\034" +
    "\uffb0\035\uffb0\036\uffb0\037\uffb0\040\uffb0\041\uffb0\042\uffb0" +
    "\043\uffb0\044\uffb0\045\uffb0\046\uffb0\047\037\050\uffb0\051" +
    "\uffb0\052\042\053\uffb0\054\uffb0\055\uffb0\057\047\060\040" +
    "\061\uffb0\062\uffb0\063\uffb0\064\uffb0\065\041\066\044\067" +
    "\036\001\002\000\124\014\uffb0\015\uffb0\016\uffb0\017\035" +
    "\020\uffb0\022\uffb0\024\uffb0\025\uffb0\026\uffb0\027\uffb0\030" +
    "\uffb0\031\uffb0\032\uffb0\033\uffb0\034\uffb0\035\uffb0\036\uffb0" +
    "\037\uffb0\040\uffb0\041\uffb0\042\uffb0\043\uffb0\044\uffb0\045" +
    "\uffb0\046\uffb0\047\037\050\uffb0\051\uffb0\052\042\053\uffb0" +
    "\054\uffb0\055\uffb0\057\047\060\040\061\uffb0\062\uffb0\063" +
    "\uffb0\064\uffb0\065\041\066\044\067\036\001\002\000\124" +
    "\014\uffb0\015\uffb0\016\uffb0\017\035\020\uffb0\022\uffb0\024" +
    "\uffb0\025\uffb0\026\uffb0\027\uffb0\030\uffb0\031\uffb0\032\uffb0" +
    "\033\uffb0\034\uffb0\035\uffb0\036\uffb0\037\uffb0\040\uffb0\041" +
    "\uffb0\042\uffb0\043\uffb0\044\uffb0\045\uffb0\046\uffb0\047\037" +
    "\050\uffb0\051\uffb0\052\042\053\uffb0\054\uffb0\055\uffb0\057" +
    "\047\060\040\061\uffb0\062\uffb0\063\uffb0\064\uffb0\065\041" +
    "\066\044\067\036\001\002\000\124\014\uffb0\015\uffb0\016" +
    "\uffb0\017\035\020\uffb0\022\uffb0\024\uffb0\025\uffb0\026\uffb0" +
    "\027\uffb0\030\uffb0\031\uffb0\032\uffb0\033\uffb0\034\uffb0\035" +
    "\uffb0\036\uffb0\037\uffb0\040\uffb0\041\uffb0\042\uffb0\043\uffb0" +
    "\044\uffb0\045\uffb0\046\uffb0\047\037\050\uffb0\051\uffb0\052" +
    "\042\053\uffb0\054\uffb0\055\uffb0\057\047\060\040\061\uffb0" +
    "\062\uffb0\063\uffb0\064\uffb0\065\041\066\044\067\036\001" +
    "\002\000\124\014\uffb0\015\uffb0\016\uffb0\017\035\020\uffb0" +
    "\022\uffb0\024\uffb0\025\uffb0\026\uffb0\027\uffb0\030\uffb0\031" +
    "\uffb0\032\uffb0\033\uffb0\034\uffb0\035\uffb0\036\uffb0\037\uffb0" +
    "\040\uffb0\041\uffb0\042\uffb0\043\uffb0\044\uffb0\045\uffb0\046" +
    "\uffb0\047\037\050\uffb0\051\uffb0\052\042\053\uffb0\054\uffb0" +
    "\055\uffb0\057\047\060\040\061\uffb0\062\uffb0\063\uffb0\064" +
    "\uffb0\065\041\066\044\067\036\001\002\000\124\014\uffb0" +
    "\015\uffb0\016\uffb0\017\035\020\uffb0\022\uffb0\024\uffb0\025" +
    "\uffb0\026\uffb0\027\uffb0\030\uffb0\031\uffb0\032\uffb0\033\uffb0" +
    "\034\uffb0\035\uffb0\036\uffb0\037\uffb0\040\uffb0\041\uffb0\042" +
    "\uffb0\043\uffb0\044\uffb0\045\uffb0\046\uffb0\047\037\050\uffb0" +
    "\051\uffb0\052\042\053\uffb0\054\uffb0\055\uffb0\057\047\060" +
    "\040\061\uffb0\062\uffb0\063\uffb0\064\uffb0\065\041\066\044" +
    "\067\036\001\002\000\124\014\uffb0\015\uffb0\016\uffb0\017" +
    "\035\020\uffb0\022\uffb0\024\uffb0\025\uffb0\026\uffb0\027\uffb0" +
    "\030\uffb0\031\uffb0\032\uffb0\033\uffb0\034\uffb0\035\uffb0\036" +
    "\uffb0\037\uffb0\040\uffb0\041\uffb0\042\uffb0\043\uffb0\044\uffb0" +
    "\045\uffb0\046\uffb0\047\037\050\uffb0\051\uffb0\052\042\053" +
    "\uffb0\054\uffb0\055\uffb0\057\047\060\040\061\uffb0\062\uffb0" +
    "\063\uffb0\064\uffb0\065\041\066\044\067\036\001\002\000" +
    "\124\014\uffb0\015\uffb0\016\uffb0\017\035\020\uffb0\022\uffb0" +
    "\024\uffb0\025\uffb0\026\uffb0\027\uffb0\030\uffb0\031\uffb0\032" +
    "\uffb0\033\uffb0\034\uffb0\035\uffb0\036\uffb0\037\uffb0\040\uffb0" +
    "\041\uffb0\042\uffb0\043\uffb0\044\uffb0\045\uffb0\046\uffb0\047" +
    "\037\050\uffb0\051\uffb0\052\042\053\uffb0\054\uffb0\055\uffb0" +
    "\057\047\060\040\061\uffb0\062\uffb0\063\uffb0\064\uffb0\065" +
    "\041\066\044\067\036\001\002\000\124\014\uffb0\015\uffb0" +
    "\016\uffb0\017\035\020\uffb0\022\uffb0\024\uffb0\025\uffb0\026" +
    "\uffb0\027\uffb0\030\uffb0\031\uffb0\032\uffb0\033\uffb0\034\uffb0" +
    "\035\uffb0\036\uffb0\037\uffb0\040\uffb0\041\uffb0\042\uffb0\043" +
    "\uffb0\044\uffb0\045\uffb0\046\uffb0\047\037\050\uffb0\051\uffb0" +
    "\052\042\053\uffb0\054\uffb0\055\uffb0\057\047\060\040\061" +
    "\uffb0\062\uffb0\063\uffb0\064\uffb0\065\041\066\044\067\036" +
    "\001\002\000\124\014\uffb0\015\uffb0\016\uffb0\017\035\020" +
    "\uffb0\022\uffb0\024\uffb0\025\uffb0\026\uffb0\027\uffb0\030\uffb0" +
    "\031\uffb0\032\uffb0\033\uffb0\034\uffb0\035\uffb0\036\uffb0\037" +
    "\uffb0\040\uffb0\041\uffb0\042\uffb0\043\uffb0\044\uffb0\045\uffb0" +
    "\046\uffb0\047\037\050\uffb0\051\uffb0\052\042\053\uffb0\054" +
    "\uffb0\055\uffb0\057\047\060\040\061\uffb0\062\uffb0\063\uffb0" +
    "\064\uffb0\065\041\066\044\067\036\001\002\000\124\014" +
    "\uffb0\015\uffb0\016\uffb0\017\035\020\uffb0\022\uffb0\024\uffb0" +
    "\025\uffb0\026\uffb0\027\uffb0\030\uffb0\031\uffb0\032\uffb0\033" +
    "\uffb0\034\uffb0\035\uffb0\036\uffb0\037\uffb0\040\uffb0\041\uffb0" +
    "\042\uffb0\043\uffb0\044\uffb0\045\uffb0\046\uffb0\047\037\050" +
    "\uffb0\051\uffb0\052\042\053\uffb0\054\uffb0\055\uffb0\057\047" +
    "\060\040\061\uffb0\062\uffb0\063\uffb0\064\uffb0\065\041\066" +
    "\044\067\036\001\002\000\124\014\uffb0\015\uffb0\016\uffb0" +
    "\017\035\020\uffb0\022\uffb0\024\uffb0\025\uffb0\026\uffb0\027" +
    "\uffb0\030\uffb0\031\uffb0\032\uffb0\033\uffb0\034\uffb0\035\uffb0" +
    "\036\uffb0\037\uffb0\040\uffb0\041\uffb0\042\uffb0\043\uffb0\044" +
    "\uffb0\045\uffb0\046\uffb0\047\037\050\uffb0\051\uffb0\052\042" +
    "\053\uffb0\054\uffb0\055\uffb0\057\047\060\040\061\uffb0\062" +
    "\uffb0\063\uffb0\064\uffb0\065\041\066\044\067\036\001\002" +
    "\000\124\014\uffb0\015\uffb0\016\uffb0\017\035\020\uffb0\022" +
    "\uffb0\024\uffb0\025\uffb0\026\uffb0\027\uffb0\030\uffb0\031\uffb0" +
    "\032\uffb0\033\uffb0\034\uffb0\035\uffb0\036\uffb0\037\uffb0\040" +
    "\uffb0\041\uffb0\042\uffb0\043\uffb0\044\uffb0\045\uffb0\046\uffb0" +
    "\047\037\050\uffb0\051\uffb0\052\042\053\uffb0\054\uffb0\055" +
    "\uffb0\057\047\060\040\061\uffb0\062\uffb0\063\uffb0\064\uffb0" +
    "\065\041\066\044\067\036\001\002\000\124\014\uffb0\015" +
    "\uffb0\016\uffb0\017\035\020\uffb0\022\uffb0\024\uffb0\025\uffb0" +
    "\026\uffb0\027\uffb0\030\uffb0\031\uffb0\032\uffb0\033\uffb0\034" +
    "\uffb0\035\uffb0\036\uffb0\037\uffb0\040\uffb0\041\uffb0\042\uffb0" +
    "\043\uffb0\044\uffb0\045\uffb0\046\uffb0\047\037\050\uffb0\051" +
    "\uffb0\052\042\053\uffb0\054\uffb0\055\uffb0\057\047\060\040" +
    "\061\uffb0\062\uffb0\063\uffb0\064\uffb0\065\041\066\044\067" +
    "\036\001\002\000\124\014\uffb0\015\uffb0\016\uffb0\017\035" +
    "\020\uffb0\022\uffb0\024\uffb0\025\uffb0\026\uffb0\027\uffb0\030" +
    "\uffb0\031\uffb0\032\uffb0\033\uffb0\034\uffb0\035\uffb0\036\uffb0" +
    "\037\uffb0\040\uffb0\041\uffb0\042\uffb0\043\uffb0\044\uffb0\045" +
    "\uffb0\046\uffb0\047\037\050\uffb0\051\uffb0\052\042\053\uffb0" +
    "\054\uffb0\055\uffb0\057\047\060\040\061\uffb0\062\uffb0\063" +
    "\uffb0\064\uffb0\065\041\066\044\067\036\001\002\000\124" +
    "\014\uffb0\015\uffb0\016\uffb0\017\035\020\uffb0\022\uffb0\024" +
    "\uffb0\025\uffb0\026\uffb0\027\uffb0\030\uffb0\031\uffb0\032\uffb0" +
    "\033\uffb0\034\uffb0\035\uffb0\036\uffb0\037\uffb0\040\uffb0\041" +
    "\uffb0\042\uffb0\043\uffb0\044\uffb0\045\uffb0\046\uffb0\047\037" +
    "\050\uffb0\051\uffb0\052\042\053\uffb0\054\uffb0\055\uffb0\057" +
    "\047\060\040\061\uffb0\062\uffb0\063\uffb0\064\uffb0\065\041" +
    "\066\044\067\036\001\002\000\124\014\uffb0\015\uffb0\016" +
    "\uffb0\017\035\020\uffb0\022\uffb0\024\uffb0\025\uffb0\026\uffb0" +
    "\027\uffb0\030\uffb0\031\uffb0\032\uffb0\033\uffb0\034\uffb0\035" +
    "\uffb0\036\uffb0\037\uffb0\040\uffb0\041\uffb0\042\uffb0\043\uffb0" +
    "\044\uffb0\045\uffb0\046\uffb0\047\037\050\uffb0\051\uffb0\052" +
    "\042\053\uffb0\054\uffb0\055\uffb0\057\047\060\040\061\uffb0" +
    "\062\uffb0\063\uffb0\064\uffb0\065\041\066\044\067\036\001" +
    "\002\000\124\014\uffb0\015\uffb0\016\uffb0\017\035\020\uffb0" +
    "\022\uffb0\024\uffb0\025\uffb0\026\uffb0\027\uffb0\030\uffb0\031" +
    "\uffb0\032\uffb0\033\uffb0\034\uffb0\035\uffb0\036\uffb0\037\uffb0" +
    "\040\uffb0\041\uffb0\042\uffb0\043\uffb0\044\uffb0\045\uffb0\046" +
    "\uffb0\047\037\050\uffb0\051\uffb0\052\042\053\uffb0\054\uffb0" +
    "\055\uffb0\057\047\060\040\061\uffb0\062\uffb0\063\uffb0\064" +
    "\uffb0\065\041\066\044\067\036\001\002\000\124\014\uffb0" +
    "\015\uffb0\016\uffb0\017\035\020\uffb0\022\uffb0\024\uffb0\025" +
    "\uffb0\026\uffb0\027\uffb0\030\uffb0\031\uffb0\032\uffb0\033\uffb0" +
    "\034\uffb0\035\uffb0\036\uffb0\037\uffb0\040\uffb0\041\uffb0\042" +
    "\uffb0\043\uffb0\044\uffb0\045\uffb0\046\uffb0\047\037\050\uffb0" +
    "\051\uffb0\052\042\053\uffb0\054\uffb0\055\uffb0\057\047\060" +
    "\040\061\uffb0\062\uffb0\063\uffb0\064\uffb0\065\041\066\044" +
    "\067\036\001\002\000\004\066\115\001\002\000\124\014" +
    "\uffb0\015\uffb0\016\uffb0\017\035\020\uffb0\022\uffb0\024\uffb0" +
    "\025\uffb0\026\uffb0\027\uffb0\030\uffb0\031\uffb0\032\uffb0\033" +
    "\uffb0\034\uffb0\035\uffb0\036\uffb0\037\uffb0\040\uffb0\041\uffb0" +
    "\042\uffb0\043\uffb0\044\uffb0\045\uffb0\046\uffb0\047\037\050" +
    "\uffb0\051\uffb0\052\042\053\uffb0\054\uffb0\055\uffb0\057\047" +
    "\060\040\061\uffb0\062\uffb0\063\uffb0\064\uffb0\065\041\066" +
    "\044\067\036\001\002\000\124\014\uffb0\015\uffb0\016\uffb0" +
    "\017\035\020\uffb0\022\uffb0\024\uffb0\025\uffb0\026\uffb0\027" +
    "\uffb0\030\uffb0\031\uffb0\032\uffb0\033\uffb0\034\uffb0\035\uffb0" +
    "\036\uffb0\037\uffb0\040\uffb0\041\uffb0\042\uffb0\043\uffb0\044" +
    "\uffb0\045\uffb0\046\uffb0\047\037\050\uffb0\051\uffb0\052\042" +
    "\053\uffb0\054\uffb0\055\uffb0\057\047\060\040\061\uffb0\062" +
    "\uffb0\063\uffb0\064\uffb0\065\041\066\044\067\036\001\002" +
    "\000\124\014\uffb0\015\uffb0\016\uffb0\017\035\020\uffb0\022" +
    "\uffb0\024\uffb0\025\uffb0\026\uffb0\027\uffb0\030\uffb0\031\uffb0" +
    "\032\uffb0\033\uffb0\034\uffb0\035\uffb0\036\uffb0\037\uffb0\040" +
    "\uffb0\041\uffb0\042\uffb0\043\uffb0\044\uffb0\045\uffb0\046\uffb0" +
    "\047\037\050\uffb0\051\uffb0\052\042\053\uffb0\054\uffb0\055" +
    "\uffb0\057\047\060\040\061\uffb0\062\uffb0\063\uffb0\064\uffb0" +
    "\065\041\066\044\067\036\001\002\000\124\014\uffb0\015" +
    "\uffb0\016\uffb0\017\035\020\uffb0\022\uffb0\024\uffb0\025\uffb0" +
    "\026\uffb0\027\uffb0\030\uffb0\031\uffb0\032\uffb0\033\uffb0\034" +
    "\uffb0\035\uffb0\036\uffb0\037\uffb0\040\uffb0\041\uffb0\042\uffb0" +
    "\043\uffb0\044\uffb0\045\uffb0\046\uffb0\047\037\050\uffb0\051" +
    "\uffb0\052\042\053\uffb0\054\uffb0\055\uffb0\057\047\060\040" +
    "\061\uffb0\062\uffb0\063\uffb0\064\uffb0\065\041\066\044\067" +
    "\036\001\002\000\124\014\uffb0\015\uffb0\016\uffb0\017\035" +
    "\020\uffb0\022\uffb0\024\uffb0\025\uffb0\026\uffb0\027\uffb0\030" +
    "\uffb0\031\uffb0\032\uffb0\033\uffb0\034\uffb0\035\uffb0\036\uffb0" +
    "\037\uffb0\040\uffb0\041\uffb0\042\uffb0\043\uffb0\044\uffb0\045" +
    "\uffb0\046\uffb0\047\037\050\uffb0\051\uffb0\052\042\053\uffb0" +
    "\054\uffb0\055\uffb0\057\047\060\040\061\uffb0\062\uffb0\063" +
    "\uffb0\064\uffb0\065\041\066\044\067\036\001\002\000\124" +
    "\014\uffb0\015\uffb0\016\uffb0\017\035\020\uffb0\022\uffb0\024" +
    "\uffb0\025\uffb0\026\uffb0\027\uffb0\030\uffb0\031\uffb0\032\uffb0" +
    "\033\uffb0\034\uffb0\035\uffb0\036\uffb0\037\uffb0\040\uffb0\041" +
    "\uffb0\042\uffb0\043\uffb0\044\uffb0\045\uffb0\046\uffb0\047\037" +
    "\050\uffb0\051\uffb0\052\042\053\uffb0\054\uffb0\055\uffb0\057" +
    "\047\060\040\061\uffb0\062\uffb0\063\uffb0\064\uffb0\065\041" +
    "\066\044\067\036\001\002\000\124\014\uffb0\015\uffb0\016" +
    "\uffb0\017\035\020\uffb0\022\uffb0\024\uffb0\025\uffb0\026\uffb0" +
    "\027\uffb0\030\uffb0\031\uffb0\032\uffb0\033\uffb0\034\uffb0\035" +
    "\uffb0\036\uffb0\037\uffb0\040\uffb0\041\uffb0\042\uffb0\043\uffb0" +
    "\044\uffb0\045\uffb0\046\uffb0\047\037\050\uffb0\051\uffb0\052" +
    "\042\053\uffb0\054\uffb0\055\uffb0\057\047\060\040\061\uffb0" +
    "\062\uffb0\063\uffb0\064\uffb0\065\041\066\044\067\036\001" +
    "\002\000\106\014\uffd6\015\uffd6\016\076\020\uffd6\022\uffd6" +
    "\024\uffd6\025\uffd6\026\uffd6\027\uffd6\030\uffd6\031\uffd6\032" +
    "\uffd6\033\uffd6\034\uffd6\035\uffd6\036\uffd6\037\uffd6\040\uffd6" +
    "\041\uffd6\042\uffd6\043\uffd6\044\uffd6\045\uffd6\046\uffd6\050" +
    "\uffd6\051\uffd6\053\uffd6\054\uffd6\055\uffd6\061\uffd6\062\uffd6" +
    "\063\uffd6\064\uffd6\065\uffd6\001\002\000\106\014\uffc3\015" +
    "\uffc3\016\076\020\uffc3\022\uffc3\024\uffc3\025\061\026\077" +
    "\027\104\030\103\031\100\032\060\033\054\034\051\035" +
    "\063\036\066\037\073\040\070\041\075\042\062\043\064" +
    "\044\053\045\101\046\056\050\067\051\057\053\055\054" +
    "\102\055\071\061\105\062\072\063\052\064\074\065\065" +
    "\001\002\000\106\014\uffc2\015\uffc2\016\076\020\uffc2\022" +
    "\uffc2\024\uffc2\025\061\026\077\027\104\030\103\031\100" +
    "\032\060\033\054\034\051\035\063\036\066\037\073\040" +
    "\070\041\075\042\062\043\064\044\053\045\101\046\056" +
    "\050\067\051\057\053\055\054\102\055\071\061\105\062" +
    "\072\063\052\064\074\065\065\001\002\000\106\014\uffc7" +
    "\015\uffc7\016\076\020\uffc7\022\uffc7\024\uffc7\025\uffc7\026" +
    "\uffc7\027\uffc7\030\uffc7\031\uffc7\032\uffc7\033\uffc7\034\uffc7" +
    "\035\uffc7\036\uffc7\037\073\040\070\041\075\042\062\043" +
    "\064\044\053\045\101\046\056\050\uffc7\051\uffc7\053\055" +
    "\054\uffc7\055\071\061\105\062\072\063\052\064\074\065" +
    "\065\001\002\000\106\014\uffcb\015\uffcb\016\076\020\uffcb" +
    "\022\uffcb\024\uffcb\025\uffcb\026\uffcb\027\uffcb\030\uffcb\031" +
    "\uffcb\032\uffcb\033\uffcb\034\uffcb\035\uffcb\036\uffcb\037\073" +
    "\040\070\041\075\042\062\043\064\044\053\045\uffcb\046" +
    "\uffcb\050\uffcb\051\uffcb\053\uffcb\054\uffcb\055\uffcb\061\105" +
    "\062\072\063\052\064\074\065\065\001\002\000\106\014" +
    "\uffc1\015\uffc1\016\076\020\uffc1\022\uffc1\024\uffc1\025\061" +
    "\026\077\027\104\030\103\031\100\032\060\033\054\034" +
    "\051\035\063\036\066\037\073\040\070\041\075\042\062" +
    "\043\064\044\053\045\101\046\056\050\067\051\057\053" +
    "\055\054\102\055\071\061\105\062\072\063\052\064\074" +
    "\065\065\001\002\000\106\014\uffc4\015\uffc4\016\076\020" +
    "\uffc4\022\uffc4\024\uffc4\025\061\026\077\027\104\030\103" +
    "\031\100\032\060\033\054\034\051\035\063\036\066\037" +
    "\073\040\070\041\075\042\062\043\064\044\053\045\101" +
    "\046\056\050\067\051\057\053\055\054\102\055\071\061" +
    "\105\062\072\063\052\064\074\065\065\001\002\000\106" +
    "\014\uffb2\015\uffb2\016\uffb2\020\uffb2\022\uffb2\024\uffb2\025" +
    "\uffb2\026\uffb2\027\uffb2\030\uffb2\031\uffb2\032\uffb2\033\uffb2" +
    "\034\uffb2\035\uffb2\036\uffb2\037\uffb2\040\uffb2\041\uffb2\042" +
    "\uffb2\043\uffb2\044\uffb2\045\uffb2\046\uffb2\050\uffb2\051\uffb2" +
    "\053\uffb2\054\uffb2\055\uffb2\061\uffb2\062\uffb2\063\uffb2\064" +
    "\uffb2\065\uffb2\001\002\000\106\014\uffce\015\uffce\016\076" +
    "\020\uffce\022\uffce\024\uffce\025\uffce\026\uffce\027\uffce\030" +
    "\uffce\031\uffce\032\uffce\033\uffce\034\uffce\035\uffce\036\uffce" +
    "\037\073\040\070\041\uffce\042\uffce\043\uffce\044\uffce\045" +
    "\uffce\046\uffce\050\uffce\051\uffce\053\uffce\054\uffce\055\uffce" +
    "\061\105\062\072\063\052\064\074\065\065\001\002\000" +
    "\106\014\uffd3\015\uffd3\016\076\020\uffd3\022\uffd3\024\uffd3" +
    "\025\uffd3\026\uffd3\027\uffd3\030\uffd3\031\uffd3\032\uffd3\033" +
    "\uffd3\034\uffd3\035\uffd3\036\uffd3\037\uffd3\040\uffd3\041\uffd3" +
    "\042\uffd3\043\uffd3\044\uffd3\045\uffd3\046\uffd3\050\uffd3\051" +
    "\uffd3\053\uffd3\054\uffd3\055\uffd3\061\105\062\072\063\052" +
    "\064\uffd3\065\uffd3\001\002\000\106\014\uffd1\015\uffd1\016" +
    "\076\020\uffd1\022\uffd1\024\uffd1\025\uffd1\026\uffd1\027\uffd1" +
    "\030\uffd1\031\uffd1\032\uffd1\033\uffd1\034\uffd1\035\uffd1\036" +
    "\uffd1\037\uffd1\040\uffd1\041\uffd1\042\uffd1\043\uffd1\044\uffd1" +
    "\045\uffd1\046\uffd1\050\uffd1\051\uffd1\053\uffd1\054\uffd1\055" +
    "\uffd1\061\105\062\072\063\052\064\074\065\065\001\002" +
    "\000\106\014\uffd5\015\uffd5\016\076\020\uffd5\022\uffd5\024" +
    "\uffd5\025\uffd5\026\uffd5\027\uffd5\030\uffd5\031\uffd5\032\uffd5" +
    "\033\uffd5\034\uffd5\035\uffd5\036\uffd5\037\uffd5\040\uffd5\041" +
    "\uffd5\042\uffd5\043\uffd5\044\uffd5\045\uffd5\046\uffd5\050\uffd5" +
    "\051\uffd5\053\uffd5\054\uffd5\055\uffd5\061\uffd5\062\uffd5\063" +
    "\uffd5\064\uffd5\065\uffd5\001\002\000\106\014\uffc8\015\uffc8" +
    "\016\076\020\uffc8\022\uffc8\024\uffc8\025\uffc8\026\uffc8\027" +
    "\uffc8\030\uffc8\031\uffc8\032\uffc8\033\uffc8\034\uffc8\035\uffc8" +
    "\036\uffc8\037\073\040\070\041\075\042\062\043\064\044" +
    "\053\045\101\046\056\050\uffc8\051\uffc8\053\055\054\uffc8" +
    "\055\uffc8\061\105\062\072\063\052\064\074\065\065\001" +
    "\002\000\106\014\uffd0\015\uffd0\016\076\020\uffd0\022\uffd0" +
    "\024\uffd0\025\uffd0\026\uffd0\027\uffd0\030\uffd0\031\uffd0\032" +
    "\uffd0\033\uffd0\034\uffd0\035\uffd0\036\uffd0\037\uffd0\040\uffd0" +
    "\041\uffd0\042\uffd0\043\uffd0\044\uffd0\045\uffd0\046\uffd0\050" +
    "\uffd0\051\uffd0\053\uffd0\054\uffd0\055\uffd0\061\105\062\072" +
    "\063\052\064\074\065\065\001\002\000\106\014\uffc6\015" +
    "\uffc6\016\076\020\uffc6\022\uffc6\024\uffc6\025\uffc6\026\uffc6" +
    "\027\uffc6\030\uffc6\031\uffc6\032\uffc6\033\uffc6\034\uffc6\035" +
    "\uffc6\036\uffc6\037\073\040\070\041\075\042\062\043\064" +
    "\044\053\045\101\046\056\050\uffc6\051\uffc6\053\055\054" +
    "\102\055\071\061\105\062\072\063\052\064\074\065\065" +
    "\001\002\000\106\014\uffbc\015\uffbc\016\076\020\uffbc\022" +
    "\uffbc\024\uffbc\025\061\026\077\027\104\030\103\031\100" +
    "\032\060\033\054\034\051\035\063\036\066\037\073\040" +
    "\070\041\075\042\062\043\064\044\053\045\101\046\056" +
    "\050\067\051\057\053\055\054\102\055\071\061\105\062" +
    "\072\063\052\064\074\065\065\001\002\000\106\014\uffd2" +
    "\015\uffd2\016\076\020\uffd2\022\uffd2\024\uffd2\025\uffd2\026" +
    "\uffd2\027\uffd2\030\uffd2\031\uffd2\032\uffd2\033\uffd2\034\uffd2" +
    "\035\uffd2\036\uffd2\037\uffd2\040\uffd2\041\uffd2\042\uffd2\043" +
    "\uffd2\044\uffd2\045\uffd2\046\uffd2\050\uffd2\051\uffd2\053\uffd2" +
    "\054\uffd2\055\uffd2\061\105\062\072\063\052\064\uffd2\065" +
    "\uffd2\001\002\000\106\014\uffcc\015\uffcc\016\076\020\uffcc" +
    "\022\uffcc\024\uffcc\025\uffcc\026\uffcc\027\uffcc\030\uffcc\031" +
    "\uffcc\032\uffcc\033\uffcc\034\uffcc\035\uffcc\036\uffcc\037\073" +
    "\040\070\041\uffcc\042\uffcc\043\uffcc\044\uffcc\045\uffcc\046" +
    "\uffcc\050\uffcc\051\uffcc\053\uffcc\054\uffcc\055\uffcc\061\105" +
    "\062\072\063\052\064\074\065\065\001\002\000\106\014" +
    "\uffbd\015\uffbd\016\076\020\uffbd\022\uffbd\024\uffbd\025\061" +
    "\026\077\027\104\030\103\031\100\032\060\033\054\034" +
    "\051\035\063\036\066\037\073\040\070\041\075\042\062" +
    "\043\064\044\053\045\101\046\056\050\067\051\057\053" +
    "\055\054\102\055\071\061\105\062\072\063\052\064\074" +
    "\065\065\001\002\000\106\014\uffcf\015\uffcf\016\076\020" +
    "\uffcf\022\uffcf\024\uffcf\025\uffcf\026\uffcf\027\uffcf\030\uffcf" +
    "\031\uffcf\032\uffcf\033\uffcf\034\uffcf\035\uffcf\036\uffcf\037" +
    "\073\040\070\041\uffcf\042\uffcf\043\uffcf\044\uffcf\045\uffcf" +
    "\046\uffcf\050\uffcf\051\uffcf\053\uffcf\054\uffcf\055\uffcf\061" +
    "\105\062\072\063\052\064\074\065\065\001\002\000\106" +
    "\014\uffbb\015\uffbb\016\076\020\uffbb\022\uffbb\024\uffbb\025" +
    "\061\026\077\027\104\030\103\031\100\032\060\033\054" +
    "\034\051\035\063\036\066\037\073\040\070\041\075\042" +
    "\062\043\064\044\053\045\101\046\056\050\067\051\057" +
    "\053\055\054\102\055\071\061\105\062\072\063\052\064" +
    "\074\065\065\001\002\000\106\014\uffc0\015\uffc0\016\076" +
    "\020\uffc0\022\uffc0\024\uffc0\025\061\026\077\027\104\030" +
    "\103\031\100\032\060\033\054\034\051\035\063\036\066" +
    "\037\073\040\070\041\075\042\062\043\064\044\053\045" +
    "\101\046\056\050\067\051\057\053\055\054\102\055\071" +
    "\061\105\062\072\063\052\064\074\065\065\001\002\000" +
    "\106\014\uffc5\015\uffc5\016\076\020\uffc5\022\uffc5\024\uffc5" +
    "\025\uffc5\026\uffc5\027\uffc5\030\uffc5\031\uffc5\032\uffc5\033" +
    "\uffc5\034\uffc5\035\uffc5\036\uffc5\037\073\040\070\041\075" +
    "\042\062\043\064\044\053\045\101\046\056\050\067\051" +
    "\uffc5\053\055\054\102\055\071\061\105\062\072\063\052" +
    "\064\074\065\065\001\002\000\106\014\uffca\015\uffca\016" +
    "\076\020\uffca\022\uffca\024\uffca\025\uffca\026\uffca\027\uffca" +
    "\030\uffca\031\uffca\032\uffca\033\uffca\034\uffca\035\uffca\036" +
    "\uffca\037\073\040\070\041\075\042\062\043\064\044\053" +
    "\045\uffca\046\uffca\050\uffca\051\uffca\053\uffca\054\uffca\055" +
    "\uffca\061\105\062\072\063\052\064\074\065\065\001\002" +
    "\000\106\014\uffc9\015\uffc9\016\076\020\uffc9\022\uffc9\024" +
    "\uffc9\025\uffc9\026\uffc9\027\uffc9\030\uffc9\031\uffc9\032\uffc9" +
    "\033\uffc9\034\uffc9\035\uffc9\036\uffc9\037\073\040\070\041" +
    "\075\042\062\043\064\044\053\045\101\046\056\050\uffc9" +
    "\051\uffc9\053\uffc9\054\uffc9\055\uffc9\061\105\062\072\063" +
    "\052\064\074\065\065\001\002\000\106\014\uffbf\015\uffbf" +
    "\016\076\020\uffbf\022\uffbf\024\uffbf\025\061\026\077\027" +
    "\104\030\103\031\100\032\060\033\054\034\051\035\063" +
    "\036\066\037\073\040\070\041\075\042\062\043\064\044" +
    "\053\045\101\046\056\050\067\051\057\053\055\054\102" +
    "\055\071\061\105\062\072\063\052\064\074\065\065\001" +
    "\002\000\106\014\uffcd\015\uffcd\016\076\020\uffcd\022\uffcd" +
    "\024\uffcd\025\uffcd\026\uffcd\027\uffcd\030\uffcd\031\uffcd\032" +
    "\uffcd\033\uffcd\034\uffcd\035\uffcd\036\uffcd\037\073\040\070" +
    "\041\uffcd\042\uffcd\043\uffcd\044\uffcd\045\uffcd\046\uffcd\050" +
    "\uffcd\051\uffcd\053\uffcd\054\uffcd\055\uffcd\061\105\062\072" +
    "\063\052\064\074\065\065\001\002\000\106\014\uffd4\015" +
    "\uffd4\016\076\020\uffd4\022\uffd4\024\uffd4\025\uffd4\026\uffd4" +
    "\027\uffd4\030\uffd4\031\uffd4\032\uffd4\033\uffd4\034\uffd4\035" +
    "\uffd4\036\uffd4\037\uffd4\040\uffd4\041\uffd4\042\uffd4\043\uffd4" +
    "\044\uffd4\045\uffd4\046\uffd4\050\uffd4\051\uffd4\053\uffd4\054" +
    "\uffd4\055\uffd4\061\uffd4\062\uffd4\063\uffd4\064\uffd4\065\uffd4" +
    "\001\002\000\106\014\uffbe\015\uffbe\016\076\020\uffbe\022" +
    "\uffbe\024\uffbe\025\061\026\077\027\104\030\103\031\100" +
    "\032\060\033\054\034\051\035\063\036\066\037\073\040" +
    "\070\041\075\042\062\043\064\044\053\045\101\046\056" +
    "\050\067\051\057\053\055\054\102\055\071\061\105\062" +
    "\072\063\052\064\074\065\065\001\002\000\116\015\uffb0" +
    "\016\uffb0\017\035\020\uffb0\025\uffb0\026\uffb0\027\uffb0\030" +
    "\uffb0\031\uffb0\032\uffb0\033\uffb0\034\uffb0\035\uffb0\036\uffb0" +
    "\037\uffb0\040\uffb0\041\uffb0\042\uffb0\043\uffb0\044\uffb0\045" +
    "\uffb0\046\uffb0\047\037\050\uffb0\051\uffb0\052\042\053\uffb0" +
    "\054\uffb0\055\uffb0\057\047\060\040\061\uffb0\062\uffb0\063" +
    "\uffb0\064\uffb0\065\041\066\044\067\036\001\002\000\106" +
    "\014\uffb3\015\uffb3\016\uffb3\020\uffb3\022\uffb3\024\uffb3\025" +
    "\uffb3\026\uffb3\027\uffb3\030\uffb3\031\uffb3\032\uffb3\033\uffb3" +
    "\034\uffb3\035\uffb3\036\uffb3\037\uffb3\040\uffb3\041\uffb3\042" +
    "\uffb3\043\uffb3\044\uffb3\045\uffb3\046\uffb3\050\uffb3\051\uffb3" +
    "\053\uffb3\054\uffb3\055\uffb3\061\uffb3\062\uffb3\063\uffb3\064" +
    "\uffb3\065\uffb3\001\002\000\114\016\uffb0\017\035\022\uffb0" +
    "\025\uffb0\026\uffb0\027\uffb0\030\uffb0\031\uffb0\032\uffb0\033" +
    "\uffb0\034\uffb0\035\uffb0\036\uffb0\037\uffb0\040\uffb0\041\uffb0" +
    "\042\uffb0\043\uffb0\044\uffb0\045\uffb0\046\uffb0\047\037\050" +
    "\uffb0\051\uffb0\052\042\053\uffb0\054\uffb0\055\uffb0\057\047" +
    "\060\040\061\uffb0\062\uffb0\063\uffb0\064\uffb0\065\041\066" +
    "\044\067\036\001\002\000\076\016\076\022\147\025\061" +
    "\026\077\027\104\030\103\031\100\032\060\033\054\034" +
    "\051\035\063\036\066\037\073\040\070\041\075\042\062" +
    "\043\064\044\053\045\101\046\056\050\067\051\057\053" +
    "\055\054\102\055\071\061\105\062\072\063\052\064\074" +
    "\065\065\001\002\000\110\014\uffae\015\uffae\016\uffae\020" +
    "\uffae\021\145\022\uffae\024\uffae\025\uffae\026\uffae\027\uffae" +
    "\030\uffae\031\uffae\032\uffae\033\uffae\034\uffae\035\uffae\036" +
    "\uffae\037\uffae\040\uffae\041\uffae\042\uffae\043\uffae\044\uffae" +
    "\045\uffae\046\uffae\050\uffae\051\uffae\053\uffae\054\uffae\055" +
    "\uffae\061\uffae\062\uffae\063\uffae\064\uffae\065\uffae\001\002" +
    "\000\106\014\uffaf\015\uffaf\016\uffaf\020\uffaf\022\uffaf\024" +
    "\uffaf\025\uffaf\026\uffaf\027\uffaf\030\uffaf\031\uffaf\032\uffaf" +
    "\033\uffaf\034\uffaf\035\uffaf\036\uffaf\037\uffaf\040\uffaf\041" +
    "\uffaf\042\uffaf\043\uffaf\044\uffaf\045\uffaf\046\uffaf\050\uffaf" +
    "\051\uffaf\053\uffaf\054\uffaf\055\uffaf\061\uffaf\062\uffaf\063" +
    "\uffaf\064\uffaf\065\uffaf\001\002\000\004\020\155\001\002" +
    "\000\102\015\153\016\076\020\uffac\024\uffac\025\061\026" +
    "\077\027\104\030\103\031\100\032\060\033\054\034\051" +
    "\035\063\036\066\037\073\040\070\041\075\042\062\043" +
    "\064\044\053\045\101\046\056\050\067\051\057\053\055" +
    "\054\102\055\071\061\105\062\072\063\052\064\074\065" +
    "\065\001\002\000\120\015\uffb0\016\uffb0\017\035\020\uffb0" +
    "\024\uffb0\025\uffb0\026\uffb0\027\uffb0\030\uffb0\031\uffb0\032" +
    "\uffb0\033\uffb0\034\uffb0\035\uffb0\036\uffb0\037\uffb0\040\uffb0" +
    "\041\uffb0\042\uffb0\043\uffb0\044\uffb0\045\uffb0\046\uffb0\047" +
    "\037\050\uffb0\051\uffb0\052\042\053\uffb0\054\uffb0\055\uffb0" +
    "\057\047\060\040\061\uffb0\062\uffb0\063\uffb0\064\uffb0\065" +
    "\041\066\044\067\036\001\002\000\006\020\uffad\024\uffad" +
    "\001\002\000\106\014\uffb4\015\uffb4\016\uffb4\020\uffb4\022" +
    "\uffb4\024\uffb4\025\uffb4\026\uffb4\027\uffb4\030\uffb4\031\uffb4" +
    "\032\uffb4\033\uffb4\034\uffb4\035\uffb4\036\uffb4\037\uffb4\040" +
    "\uffb4\041\uffb4\042\uffb4\043\uffb4\044\uffb4\045\uffb4\046\uffb4" +
    "\050\uffb4\051\uffb4\053\uffb4\054\uffb4\055\uffb4\061\uffb4\062" +
    "\uffb4\063\uffb4\064\uffb4\065\uffb4\001\002\000\004\024\157" +
    "\001\002\000\006\014\uffd7\015\uffd7\001\002\000\106\014" +
    "\uffb6\015\uffb6\016\076\020\uffb6\022\uffb6\024\uffb6\025\uffb6" +
    "\026\uffb6\027\uffb6\030\uffb6\031\uffb6\032\uffb6\033\uffb6\034" +
    "\uffb6\035\uffb6\036\uffb6\037\uffb6\040\uffb6\041\uffb6\042\uffb6" +
    "\043\uffb6\044\uffb6\045\uffb6\046\uffb6\050\uffb6\051\uffb6\053" +
    "\uffb6\054\uffb6\055\uffb6\061\uffb6\062\uffb6\063\uffb6\064\uffb6" +
    "\065\uffb6\001\002\000\106\014\uffba\015\uffba\016\076\020" +
    "\uffba\022\uffba\024\uffba\025\uffba\026\uffba\027\uffba\030\uffba" +
    "\031\uffba\032\uffba\033\uffba\034\uffba\035\uffba\036\uffba\037" +
    "\uffba\040\uffba\041\uffba\042\uffba\043\uffba\044\uffba\045\uffba" +
    "\046\uffba\050\uffba\051\uffba\053\uffba\054\uffba\055\uffba\061" +
    "\uffba\062\uffba\063\uffba\064\uffba\065\uffba\001\002\000\106" +
    "\014\uffb7\015\uffb7\016\076\020\uffb7\022\uffb7\024\uffb7\025" +
    "\uffb7\026\uffb7\027\uffb7\030\uffb7\031\uffb7\032\uffb7\033\uffb7" +
    "\034\uffb7\035\uffb7\036\uffb7\037\uffb7\040\uffb7\041\uffb7\042" +
    "\uffb7\043\uffb7\044\uffb7\045\uffb7\046\uffb7\050\uffb7\051\uffb7" +
    "\053\uffb7\054\uffb7\055\uffb7\061\uffb7\062\uffb7\063\uffb7\064" +
    "\uffb7\065\uffb7\001\002\000\106\014\uffb9\015\uffb9\016\076" +
    "\020\uffb9\022\uffb9\024\uffb9\025\uffb9\026\uffb9\027\uffb9\030" +
    "\uffb9\031\uffb9\032\uffb9\033\uffb9\034\uffb9\035\uffb9\036\uffb9" +
    "\037\uffb9\040\uffb9\041\uffb9\042\uffb9\043\uffb9\044\uffb9\045" +
    "\uffb9\046\uffb9\050\uffb9\051\uffb9\053\uffb9\054\uffb9\055\uffb9" +
    "\061\uffb9\062\uffb9\063\uffb9\064\uffb9\065\uffb9\001\002\000" +
    "\076\016\076\020\165\025\061\026\077\027\104\030\103" +
    "\031\100\032\060\033\054\034\051\035\063\036\066\037" +
    "\073\040\070\041\075\042\062\043\064\044\053\045\101" +
    "\046\056\050\067\051\057\053\055\054\102\055\071\061" +
    "\105\062\072\063\052\064\074\065\065\001\002\000\106" +
    "\014\uffb5\015\uffb5\016\uffb5\020\uffb5\022\uffb5\024\uffb5\025" +
    "\uffb5\026\uffb5\027\uffb5\030\uffb5\031\uffb5\032\uffb5\033\uffb5" +
    "\034\uffb5\035\uffb5\036\uffb5\037\uffb5\040\uffb5\041\uffb5\042" +
    "\uffb5\043\uffb5\044\uffb5\045\uffb5\046\uffb5\050\uffb5\051\uffb5" +
    "\053\uffb5\054\uffb5\055\uffb5\061\uffb5\062\uffb5\063\uffb5\064" +
    "\uffb5\065\uffb5\001\002\000\006\014\ufff6\066\ufff6\001\002" +
    "\000\132\004\uffdf\006\uffdf\007\uffdf\010\uffdf\011\uffdf\014" +
    "\uffdf\016\uffdf\017\uffdf\023\uffdf\024\uffdf\025\uffdf\026\uffdf" +
    "\027\uffdf\030\uffdf\031\uffdf\032\uffdf\033\uffdf\034\uffdf\035" +
    "\uffdf\036\uffdf\037\uffdf\040\uffdf\041\uffdf\042\uffdf\043\uffdf" +
    "\044\uffdf\045\uffdf\046\uffdf\047\uffdf\050\uffdf\051\uffdf\052" +
    "\uffdf\053\uffdf\054\uffdf\055\uffdf\057\uffdf\060\uffdf\061\uffdf" +
    "\062\uffdf\063\uffdf\064\uffdf\065\uffdf\066\uffdf\067\uffdf\001" +
    "\002\000\004\023\210\001\002\000\014\014\ufff2\015\ufff2" +
    "\017\177\021\ufff2\025\ufff2\001\002\000\006\014\ufffb\015" +
    "\175\001\002\000\004\014\174\001\002\000\010\002\ufffd" +
    "\012\ufffd\013\ufffd\001\002\000\006\014\ufff9\066\022\001" +
    "\002\000\004\014\ufffa\001\002\000\010\012\010\013\012" +
    "\020\uffed\001\002\000\004\020\206\001\002\000\006\015" +
    "\204\020\uffee\001\002\000\004\066\022\001\002\000\010" +
    "\015\uffec\020\uffec\021\032\001\002\000\010\012\010\013" +
    "\012\020\uffed\001\002\000\004\020\uffef\001\002\000\004" +
    "\023\ufff0\001\002\000\010\002\ufffc\012\ufffc\013\ufffc\001" +
    "\002\000\136\004\uffde\006\uffde\007\uffde\010\uffde\011\uffde" +
    "\012\010\013\012\014\uffde\016\uffde\017\uffde\023\uffde\024" +
    "\uffde\025\uffde\026\uffde\027\uffde\030\uffde\031\uffde\032\uffde" +
    "\033\uffde\034\uffde\035\uffde\036\uffde\037\uffde\040\uffde\041" +
    "\uffde\042\uffde\043\uffde\044\uffde\045\uffde\046\uffde\047\uffde" +
    "\050\uffde\051\uffde\052\uffde\053\uffde\054\uffde\055\uffde\057" +
    "\uffde\060\uffde\061\uffde\062\uffde\063\uffde\064\uffde\065\uffde" +
    "\066\uffde\067\uffde\001\002\000\132\004\216\006\212\007" +
    "\221\010\222\011\215\014\uffb0\016\uffb0\017\035\023\210" +
    "\024\uffe9\025\uffb0\026\uffb0\027\uffb0\030\uffb0\031\uffb0\032" +
    "\uffb0\033\uffb0\034\uffb0\035\uffb0\036\uffb0\037\uffb0\040\uffb0" +
    "\041\uffb0\042\uffb0\043\uffb0\044\uffb0\045\uffb0\046\uffb0\047" +
    "\037\050\uffb0\051\uffb0\052\042\053\uffb0\054\uffb0\055\uffb0" +
    "\057\047\060\040\061\uffb0\062\uffb0\063\uffb0\064\uffb0\065" +
    "\041\066\044\067\036\001\002\000\004\014\250\001\002" +
    "\000\004\024\247\001\002\000\132\004\216\006\212\007" +
    "\221\010\222\011\215\014\uffb0\016\uffb0\017\035\023\210" +
    "\024\uffe9\025\uffb0\026\uffb0\027\uffb0\030\uffb0\031\uffb0\032" +
    "\uffb0\033\uffb0\034\uffb0\035\uffb0\036\uffb0\037\uffb0\040\uffb0" +
    "\041\uffb0\042\uffb0\043\uffb0\044\uffb0\045\uffb0\046\uffb0\047" +
    "\037\050\uffb0\051\uffb0\052\042\053\uffb0\054\uffb0\055\uffb0" +
    "\057\047\060\040\061\uffb0\062\uffb0\063\uffb0\064\uffb0\065" +
    "\041\066\044\067\036\001\002\000\114\014\uffb0\016\uffb0" +
    "\017\035\025\uffb0\026\uffb0\027\uffb0\030\uffb0\031\uffb0\032" +
    "\uffb0\033\uffb0\034\uffb0\035\uffb0\036\uffb0\037\uffb0\040\uffb0" +
    "\041\uffb0\042\uffb0\043\uffb0\044\uffb0\045\uffb0\046\uffb0\047" +
    "\037\050\uffb0\051\uffb0\052\042\053\uffb0\054\uffb0\055\uffb0" +
    "\057\047\060\040\061\uffb0\062\uffb0\063\uffb0\064\uffb0\065" +
    "\041\066\044\067\036\001\002\000\004\017\235\001\002" +
    "\000\076\014\234\016\076\025\061\026\077\027\104\030" +
    "\103\031\100\032\060\033\054\034\051\035\063\036\066" +
    "\037\073\040\070\041\075\042\062\043\064\044\053\045" +
    "\101\046\056\050\067\051\057\053\055\054\102\055\071" +
    "\061\105\062\072\063\052\064\074\065\065\001\002\000" +
    "\134\004\uffe7\005\uffe7\006\uffe7\007\uffe7\010\uffe7\011\uffe7" +
    "\014\uffe7\016\uffe7\017\uffe7\023\uffe7\024\uffe7\025\uffe7\026" +
    "\uffe7\027\uffe7\030\uffe7\031\uffe7\032\uffe7\033\uffe7\034\uffe7" +
    "\035\uffe7\036\uffe7\037\uffe7\040\uffe7\041\uffe7\042\uffe7\043" +
    "\uffe7\044\uffe7\045\uffe7\046\uffe7\047\uffe7\050\uffe7\051\uffe7" +
    "\052\uffe7\053\uffe7\054\uffe7\055\uffe7\057\uffe7\060\uffe7\061" +
    "\uffe7\062\uffe7\063\uffe7\064\uffe7\065\uffe7\066\uffe7\067\uffe7" +
    "\001\002\000\004\014\233\001\002\000\004\017\223\001" +
    "\002\000\114\014\uffb0\016\uffb0\017\035\025\uffb0\026\uffb0" +
    "\027\uffb0\030\uffb0\031\uffb0\032\uffb0\033\uffb0\034\uffb0\035" +
    "\uffb0\036\uffb0\037\uffb0\040\uffb0\041\uffb0\042\uffb0\043\uffb0" +
    "\044\uffb0\045\uffb0\046\uffb0\047\037\050\uffb0\051\uffb0\052" +
    "\042\053\uffb0\054\uffb0\055\uffb0\057\047\060\040\061\uffb0" +
    "\062\uffb0\063\uffb0\064\uffb0\065\041\066\044\067\036\001" +
    "\002\000\076\014\225\016\076\025\061\026\077\027\104" +
    "\030\103\031\100\032\060\033\054\034\051\035\063\036" +
    "\066\037\073\040\070\041\075\042\062\043\064\044\053" +
    "\045\101\046\056\050\067\051\057\053\055\054\102\055" +
    "\071\061\105\062\072\063\052\064\074\065\065\001\002" +
    "\000\114\014\uffb0\016\uffb0\017\035\025\uffb0\026\uffb0\027" +
    "\uffb0\030\uffb0\031\uffb0\032\uffb0\033\uffb0\034\uffb0\035\uffb0" +
    "\036\uffb0\037\uffb0\040\uffb0\041\uffb0\042\uffb0\043\uffb0\044" +
    "\uffb0\045\uffb0\046\uffb0\047\037\050\uffb0\051\uffb0\052\042" +
    "\053\uffb0\054\uffb0\055\uffb0\057\047\060\040\061\uffb0\062" +
    "\uffb0\063\uffb0\064\uffb0\065\041\066\044\067\036\001\002" +
    "\000\076\014\227\016\076\025\061\026\077\027\104\030" +
    "\103\031\100\032\060\033\054\034\051\035\063\036\066" +
    "\037\073\040\070\041\075\042\062\043\064\044\053\045" +
    "\101\046\056\050\067\051\057\053\055\054\102\055\071" +
    "\061\105\062\072\063\052\064\074\065\065\001\002\000" +
    "\114\016\uffb0\017\035\020\uffb0\025\uffb0\026\uffb0\027\uffb0" +
    "\030\uffb0\031\uffb0\032\uffb0\033\uffb0\034\uffb0\035\uffb0\036" +
    "\uffb0\037\uffb0\040\uffb0\041\uffb0\042\uffb0\043\uffb0\044\uffb0" +
    "\045\uffb0\046\uffb0\047\037\050\uffb0\051\uffb0\052\042\053" +
    "\uffb0\054\uffb0\055\uffb0\057\047\060\040\061\uffb0\062\uffb0" +
    "\063\uffb0\064\uffb0\065\041\066\044\067\036\001\002\000" +
    "\076\016\076\020\231\025\061\026\077\027\104\030\103" +
    "\031\100\032\060\033\054\034\051\035\063\036\066\037" +
    "\073\040\070\041\075\042\062\043\064\044\053\045\101" +
    "\046\056\050\067\051\057\053\055\054\102\055\071\061" +
    "\105\062\072\063\052\064\074\065\065\001\002\000\130" +
    "\004\216\006\212\007\221\010\222\011\215\014\uffb0\016" +
    "\uffb0\017\035\023\210\025\uffb0\026\uffb0\027\uffb0\030\uffb0" +
    "\031\uffb0\032\uffb0\033\uffb0\034\uffb0\035\uffb0\036\uffb0\037" +
    "\uffb0\040\uffb0\041\uffb0\042\uffb0\043\uffb0\044\uffb0\045\uffb0" +
    "\046\uffb0\047\037\050\uffb0\051\uffb0\052\042\053\uffb0\054" +
    "\uffb0\055\uffb0\057\047\060\040\061\uffb0\062\uffb0\063\uffb0" +
    "\064\uffb0\065\041\066\044\067\036\001\002\000\134\004" +
    "\uffe4\005\uffe4\006\uffe4\007\uffe4\010\uffe4\011\uffe4\014\uffe4" +
    "\016\uffe4\017\uffe4\023\uffe4\024\uffe4\025\uffe4\026\uffe4\027" +
    "\uffe4\030\uffe4\031\uffe4\032\uffe4\033\uffe4\034\uffe4\035\uffe4" +
    "\036\uffe4\037\uffe4\040\uffe4\041\uffe4\042\uffe4\043\uffe4\044" +
    "\uffe4\045\uffe4\046\uffe4\047\uffe4\050\uffe4\051\uffe4\052\uffe4" +
    "\053\uffe4\054\uffe4\055\uffe4\057\uffe4\060\uffe4\061\uffe4\062" +
    "\uffe4\063\uffe4\064\uffe4\065\uffe4\066\uffe4\067\uffe4\001\002" +
    "\000\134\004\uffe2\005\uffe2\006\uffe2\007\uffe2\010\uffe2\011" +
    "\uffe2\014\uffe2\016\uffe2\017\uffe2\023\uffe2\024\uffe2\025\uffe2" +
    "\026\uffe2\027\uffe2\030\uffe2\031\uffe2\032\uffe2\033\uffe2\034" +
    "\uffe2\035\uffe2\036\uffe2\037\uffe2\040\uffe2\041\uffe2\042\uffe2" +
    "\043\uffe2\044\uffe2\045\uffe2\046\uffe2\047\uffe2\050\uffe2\051" +
    "\uffe2\052\uffe2\053\uffe2\054\uffe2\055\uffe2\057\uffe2\060\uffe2" +
    "\061\uffe2\062\uffe2\063\uffe2\064\uffe2\065\uffe2\066\uffe2\067" +
    "\uffe2\001\002\000\134\004\uffe8\005\uffe8\006\uffe8\007\uffe8" +
    "\010\uffe8\011\uffe8\014\uffe8\016\uffe8\017\uffe8\023\uffe8\024" +
    "\uffe8\025\uffe8\026\uffe8\027\uffe8\030\uffe8\031\uffe8\032\uffe8" +
    "\033\uffe8\034\uffe8\035\uffe8\036\uffe8\037\uffe8\040\uffe8\041" +
    "\uffe8\042\uffe8\043\uffe8\044\uffe8\045\uffe8\046\uffe8\047\uffe8" +
    "\050\uffe8\051\uffe8\052\uffe8\053\uffe8\054\uffe8\055\uffe8\057" +
    "\uffe8\060\uffe8\061\uffe8\062\uffe8\063\uffe8\064\uffe8\065\uffe8" +
    "\066\uffe8\067\uffe8\001\002\000\114\016\uffb0\017\035\020" +
    "\uffb0\025\uffb0\026\uffb0\027\uffb0\030\uffb0\031\uffb0\032\uffb0" +
    "\033\uffb0\034\uffb0\035\uffb0\036\uffb0\037\uffb0\040\uffb0\041" +
    "\uffb0\042\uffb0\043\uffb0\044\uffb0\045\uffb0\046\uffb0\047\037" +
    "\050\uffb0\051\uffb0\052\042\053\uffb0\054\uffb0\055\uffb0\057" +
    "\047\060\040\061\uffb0\062\uffb0\063\uffb0\064\uffb0\065\041" +
    "\066\044\067\036\001\002\000\076\016\076\020\237\025" +
    "\061\026\077\027\104\030\103\031\100\032\060\033\054" +
    "\034\051\035\063\036\066\037\073\040\070\041\075\042" +
    "\062\043\064\044\053\045\101\046\056\050\067\051\057" +
    "\053\055\054\102\055\071\061\105\062\072\063\052\064" +
    "\074\065\065\001\002\000\130\004\216\006\212\007\221" +
    "\010\222\011\215\014\uffb0\016\uffb0\017\035\023\210\025" +
    "\uffb0\026\uffb0\027\uffb0\030\uffb0\031\uffb0\032\uffb0\033\uffb0" +
    "\034\uffb0\035\uffb0\036\uffb0\037\uffb0\040\uffb0\041\uffb0\042" +
    "\uffb0\043\uffb0\044\uffb0\045\uffb0\046\uffb0\047\037\050\uffb0" +
    "\051\uffb0\052\042\053\uffb0\054\uffb0\055\uffb0\057\047\060" +
    "\040\061\uffb0\062\uffb0\063\uffb0\064\uffb0\065\041\066\044" +
    "\067\036\001\002\000\134\004\uffe0\005\241\006\uffe0\007" +
    "\uffe0\010\uffe0\011\uffe0\014\uffe0\016\uffe0\017\uffe0\023\uffe0" +
    "\024\uffe0\025\uffe0\026\uffe0\027\uffe0\030\uffe0\031\uffe0\032" +
    "\uffe0\033\uffe0\034\uffe0\035\uffe0\036\uffe0\037\uffe0\040\uffe0" +
    "\041\uffe0\042\uffe0\043\uffe0\044\uffe0\045\uffe0\046\uffe0\047" +
    "\uffe0\050\uffe0\051\uffe0\052\uffe0\053\uffe0\054\uffe0\055\uffe0" +
    "\057\uffe0\060\uffe0\061\uffe0\062\uffe0\063\uffe0\064\uffe0\065" +
    "\uffe0\066\uffe0\067\uffe0\001\002\000\130\004\216\006\212" +
    "\007\221\010\222\011\215\014\uffb0\016\uffb0\017\035\023" +
    "\210\025\uffb0\026\uffb0\027\uffb0\030\uffb0\031\uffb0\032\uffb0" +
    "\033\uffb0\034\uffb0\035\uffb0\036\uffb0\037\uffb0\040\uffb0\041" +
    "\uffb0\042\uffb0\043\uffb0\044\uffb0\045\uffb0\046\uffb0\047\037" +
    "\050\uffb0\051\uffb0\052\042\053\uffb0\054\uffb0\055\uffb0\057" +
    "\047\060\040\061\uffb0\062\uffb0\063\uffb0\064\uffb0\065\041" +
    "\066\044\067\036\001\002\000\134\004\uffe5\005\uffe5\006" +
    "\uffe5\007\uffe5\010\uffe5\011\uffe5\014\uffe5\016\uffe5\017\uffe5" +
    "\023\uffe5\024\uffe5\025\uffe5\026\uffe5\027\uffe5\030\uffe5\031" +
    "\uffe5\032\uffe5\033\uffe5\034\uffe5\035\uffe5\036\uffe5\037\uffe5" +
    "\040\uffe5\041\uffe5\042\uffe5\043\uffe5\044\uffe5\045\uffe5\046" +
    "\uffe5\047\uffe5\050\uffe5\051\uffe5\052\uffe5\053\uffe5\054\uffe5" +
    "\055\uffe5\057\uffe5\060\uffe5\061\uffe5\062\uffe5\063\uffe5\064" +
    "\uffe5\065\uffe5\066\uffe5\067\uffe5\001\002\000\134\004\uffe1" +
    "\005\uffe1\006\uffe1\007\uffe1\010\uffe1\011\uffe1\014\uffe1\016" +
    "\uffe1\017\uffe1\023\uffe1\024\uffe1\025\uffe1\026\uffe1\027\uffe1" +
    "\030\uffe1\031\uffe1\032\uffe1\033\uffe1\034\uffe1\035\uffe1\036" +
    "\uffe1\037\uffe1\040\uffe1\041\uffe1\042\uffe1\043\uffe1\044\uffe1" +
    "\045\uffe1\046\uffe1\047\uffe1\050\uffe1\051\uffe1\052\uffe1\053" +
    "\uffe1\054\uffe1\055\uffe1\057\uffe1\060\uffe1\061\uffe1\062\uffe1" +
    "\063\uffe1\064\uffe1\065\uffe1\066\uffe1\067\uffe1\001\002\000" +
    "\076\014\245\016\076\025\061\026\077\027\104\030\103" +
    "\031\100\032\060\033\054\034\051\035\063\036\066\037" +
    "\073\040\070\041\075\042\062\043\064\044\053\045\101" +
    "\046\056\050\067\051\057\053\055\054\102\055\071\061" +
    "\105\062\072\063\052\064\074\065\065\001\002\000\134" +
    "\004\uffe6\005\uffe6\006\uffe6\007\uffe6\010\uffe6\011\uffe6\014" +
    "\uffe6\016\uffe6\017\uffe6\023\uffe6\024\uffe6\025\uffe6\026\uffe6" +
    "\027\uffe6\030\uffe6\031\uffe6\032\uffe6\033\uffe6\034\uffe6\035" +
    "\uffe6\036\uffe6\037\uffe6\040\uffe6\041\uffe6\042\uffe6\043\uffe6" +
    "\044\uffe6\045\uffe6\046\uffe6\047\uffe6\050\uffe6\051\uffe6\052" +
    "\uffe6\053\uffe6\054\uffe6\055\uffe6\057\uffe6\060\uffe6\061\uffe6" +
    "\062\uffe6\063\uffe6\064\uffe6\065\uffe6\066\uffe6\067\uffe6\001" +
    "\002\000\004\024\uffea\001\002\000\142\002\uffeb\004\uffeb" +
    "\005\uffeb\006\uffeb\007\uffeb\010\uffeb\011\uffeb\012\uffeb\013" +
    "\uffeb\014\uffeb\016\uffeb\017\uffeb\023\uffeb\024\uffeb\025\uffeb" +
    "\026\uffeb\027\uffeb\030\uffeb\031\uffeb\032\uffeb\033\uffeb\034" +
    "\uffeb\035\uffeb\036\uffeb\037\uffeb\040\uffeb\041\uffeb\042\uffeb" +
    "\043\uffeb\044\uffeb\045\uffeb\046\uffeb\047\uffeb\050\uffeb\051" +
    "\uffeb\052\uffeb\053\uffeb\054\uffeb\055\uffeb\057\uffeb\060\uffeb" +
    "\061\uffeb\062\uffeb\063\uffeb\064\uffeb\065\uffeb\066\uffeb\067" +
    "\uffeb\001\002\000\134\004\uffe3\005\uffe3\006\uffe3\007\uffe3" +
    "\010\uffe3\011\uffe3\014\uffe3\016\uffe3\017\uffe3\023\uffe3\024" +
    "\uffe3\025\uffe3\026\uffe3\027\uffe3\030\uffe3\031\uffe3\032\uffe3" +
    "\033\uffe3\034\uffe3\035\uffe3\036\uffe3\037\uffe3\040\uffe3\041" +
    "\uffe3\042\uffe3\043\uffe3\044\uffe3\045\uffe3\046\uffe3\047\uffe3" +
    "\050\uffe3\051\uffe3\052\uffe3\053\uffe3\054\uffe3\055\uffe3\057" +
    "\uffe3\060\uffe3\061\uffe3\062\uffe3\063\uffe3\064\uffe3\065\uffe3" +
    "\066\uffe3\067\uffe3\001\002\000\004\002\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\247\000\014\002\010\003\003\004\005\006\006\007" +
    "\004\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\003\250\004\005\006\006\007\004\001\001\000\012\005" +
    "\172\011\022\012\167\024\171\001\001\000\004\010\014" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\006\020" +
    "\007\004\021\017\022\016\001\001\000\012\006\020\007" +
    "\004\021\166\022\016\001\001\000\002\001\001\000\010" +
    "\011\022\023\024\024\023\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\011\022\023\027\024\023\001\001\000" +
    "\002\001\001\000\006\025\044\026\045\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\026" +
    "\163\001\001\000\002\001\001\000\004\026\162\001\001" +
    "\000\004\026\161\001\001\000\004\026\160\001\001\000" +
    "\004\026\157\001\001\000\006\026\151\030\155\001\001" +
    "\000\004\027\143\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\026\047\001\001\000\002\001\001\000\004" +
    "\026\141\001\001\000\004\026\140\001\001\000\004\026" +
    "\137\001\001\000\004\026\136\001\001\000\004\026\135" +
    "\001\001\000\004\026\134\001\001\000\004\026\133\001" +
    "\001\000\004\026\132\001\001\000\004\026\131\001\001" +
    "\000\004\026\130\001\001\000\004\026\127\001\001\000" +
    "\004\026\126\001\001\000\004\026\125\001\001\000\004" +
    "\026\124\001\001\000\004\026\123\001\001\000\004\026" +
    "\122\001\001\000\004\026\121\001\001\000\004\026\120" +
    "\001\001\000\004\026\117\001\001\000\004\026\116\001" +
    "\001\000\004\026\115\001\001\000\002\001\001\000\004" +
    "\026\113\001\001\000\004\026\112\001\001\000\004\026" +
    "\111\001\001\000\004\026\110\001\001\000\004\026\107" +
    "\001\001\000\004\026\106\001\001\000\004\026\105\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\026\151\030\150\001\001\000\002\001\001\000" +
    "\004\026\145\001\001\000\002\001\001\000\004\027\147" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\026\151\030\153\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\015\206\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\005\175\011\022\024\171\001\001\000\002" +
    "\001\001\000\012\006\201\007\004\013\177\014\200\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\011\202" +
    "\001\001\000\002\001\001\000\012\006\201\007\004\013" +
    "\204\014\200\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\006\020\007\004\021\210\022" +
    "\016\001\001\000\012\015\217\016\212\017\213\026\216" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\015" +
    "\217\016\245\017\213\026\216\001\001\000\004\026\243" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\026\223" +
    "\001\001\000\002\001\001\000\004\026\225\001\001\000" +
    "\002\001\001\000\004\026\227\001\001\000\002\001\001" +
    "\000\010\015\217\017\231\026\216\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\026\235" +
    "\001\001\000\002\001\001\000\010\015\217\017\237\026" +
    "\216\001\001\000\004\020\241\001\001\000\010\015\217" +
    "\017\242\026\216\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public Parser(InputStream in) {
        this(new Lexer(in));
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {


    static Symbol symbol(String s) {
        return Symbol.symbol(s);
    }

  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // ARGS ::= EXP 
            {
              Args RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Args2(exp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGS",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ARGS ::= EXP COMMA ARGS 
            {
              Args RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int _argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int _argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Args _args = (Args)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Args1(exp, _args); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGS",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ARRS ::= 
            {
              Arrs RESULT =null;
		 RESULT = new Arrs2(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARRS",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ARRS ::= LB EXP RB ARRS 
            {
              Arrs RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int arrsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int arrsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Arrs arrs = (Arrs)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Arrs1(exp, arrs); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARRS",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // EXP ::= 
            {
              Exp RESULT =null;
		 RESULT = new Exp8(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // EXP ::= INT 
            {
              Exp RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer num = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Exp7(num.intValue()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // EXP ::= EXP DOT ID 
            {
              Exp RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Exp6(exp,symbol(id)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // EXP ::= ID ARRS 
            {
              Exp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int arrsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int arrsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Arrs arrs = (Arrs)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Exp5(symbol(id),arrs); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // EXP ::= ID LP ARGS RP 
            {
              Exp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int _argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int _argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Args _args = (Args)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Exp4(symbol(id),_args); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // EXP ::= LP EXP RP 
            {
              Exp RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Exp3(exp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // EXP ::= BN EXP 
            {
              Exp RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Bn(exp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // EXP ::= PD EXP 
            {
              Exp RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Pd(exp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // EXP ::= PI EXP 
            {
              Exp RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Pi(exp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // EXP ::= LN EXP 
            {
              Exp RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Ln(exp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // EXP ::= SUB EXP 
            {
              Exp RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Neg(exp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // EXP ::= EXP AS EXP 
            {
              Exp RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new As(exp1, exp2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // EXP ::= EXP SRA EXP 
            {
              Exp RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Sra(exp1,exp2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // EXP ::= EXP SLA EXP 
            {
              Exp RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Sla(exp1,exp2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // EXP ::= EXP BOA EXP 
            {
              Exp RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Boa(exp1,exp2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // EXP ::= EXP BXA EXP 
            {
              Exp RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Bxa(exp1,exp2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // EXP ::= EXP BAA EXP 
            {
              Exp RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Baa(exp1,exp2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // EXP ::= EXP DA EXP 
            {
              Exp RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Da(exp1, exp2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // EXP ::= EXP MA EXP 
            {
              Exp RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Ma(exp1, exp2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // EXP ::= EXP SA EXP 
            {
              Exp RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Sa(exp1, exp2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // EXP ::= EXP AA EXP 
            {
              Exp RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Aa(exp1, exp2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // EXP ::= EXP LO EXP 
            {
              Exp RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Lo(exp1, exp2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // EXP ::= EXP LA EXP 
            {
              Exp RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new La(exp1, exp2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // EXP ::= EXP BO EXP 
            {
              Exp RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Bo(exp1, exp2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // EXP ::= EXP BX EXP 
            {
              Exp RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Bx(exp1, exp2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // EXP ::= EXP BA EXP 
            {
              Exp RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Ba(exp1, exp2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // EXP ::= EXP NE EXP 
            {
              Exp RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Ne(exp1, exp2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // EXP ::= EXP EQ EXP 
            {
              Exp RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Eq(exp1, exp2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // EXP ::= EXP LE EXP 
            {
              Exp RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Le(exp1, exp2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // EXP ::= EXP LT EXP 
            {
              Exp RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Lt(exp1, exp2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // EXP ::= EXP GE EXP 
            {
              Exp RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Ge(exp1, exp2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // EXP ::= EXP GT EXP 
            {
              Exp RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Gt(exp1, exp2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // EXP ::= EXP SR EXP 
            {
              Exp RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Sr(exp1, exp2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // EXP ::= EXP SL EXP 
            {
              Exp RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Sl(exp1, exp2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // EXP ::= EXP SUB EXP 
            {
              Exp RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Sub(exp1,exp2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // EXP ::= EXP ADD EXP 
            {
              Exp RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Add(exp1,exp2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // EXP ::= EXP MOD EXP 
            {
              Exp RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Mod(exp1,exp2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // EXP ::= EXP DIV EXP 
            {
              Exp RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Div(exp1,exp2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // EXP ::= EXP MUL EXP 
            {
              Exp RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Mul(exp1,exp2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // INIT ::= LC ARGS RC 
            {
              Init RESULT =null;
		int _argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int _argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Args _args = (Args)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Init2(_args); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INIT",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // INIT ::= EXP 
            {
              Init RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Init1(exp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INIT",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DEC ::= VAR AS INIT 
            {
              Dec RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Var var = (Var)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int initleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int initright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Init init = (Init)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Dec2(var,init); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DEC",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DEC ::= VAR 
            {
              Dec RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Var var = (Var)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Dec1(var); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DEC",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DECS ::= DEC 
            {
              Decs RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dec dec = (Dec)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Decs2(dec); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECS",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DECS ::= DEC COMMA DECS 
            {
              Decs RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int decright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Dec dec = (Dec)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int decsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int decsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Decs decs = (Decs)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Decs1(dec,decs); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECS",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DEF ::= SPEC DECS SEMI 
            {
              Def RESULT =null;
		int specleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int specright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Spec spec = (Spec)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int decsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int decsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Decs decs = (Decs)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Def(spec,decs); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DEF",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DEFS ::= 
            {
              Defs RESULT =null;
		 RESULT = new Defs2(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DEFS",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DEFS ::= DEF DEFS 
            {
              Defs RESULT =null;
		int defleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int defright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Def def = (Def)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int defsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int defsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Defs defs = (Defs)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Defs1(def,defs); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DEFS",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ESTMT ::= 
            {
              Estmt RESULT =null;
		 RESULT = new Estmt2(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTMT",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ESTMT ::= ELSE STMT 
            {
              Estmt RESULT =null;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stmt stmt = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Estmt1(stmt); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTMT",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // STMT ::= BREAK SEMI 
            {
              Stmt RESULT =null;
		 RESULT = new Stmt7(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STMT",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // STMT ::= CONTINUE SEMI 
            {
              Stmt RESULT =null;
		 RESULT = new Stmt6(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STMT",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // STMT ::= FOR LP EXP SEMI EXP SEMI EXP RP STMT 
            {
              Stmt RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int exp3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp exp3 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stmt stmt = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Stmt5(exp1,exp2,exp3,stmt); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STMT",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // STMT ::= IF LP EXP RP STMT ESTMT 
            {
              Stmt RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Stmt stmt = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int estmtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int estmtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Estmt estmt = (Estmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Stmt4(exp,stmt,estmt); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STMT",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // STMT ::= RETURN EXP SEMI 
            {
              Stmt RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Stmt3(exp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STMT",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // STMT ::= STMTBLOCK 
            {
              Stmt RESULT =null;
		int stmtblockleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stmtblockright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stmtblock stmtblock = (Stmtblock)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Stmt2(stmtblock); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STMT",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // STMT ::= EXP SEMI 
            {
              Stmt RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Stmt1(exp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STMT",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // STMTS ::= 
            {
              Stmts RESULT =null;
		 RESULT = new Stmts2(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STMTS",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // STMTS ::= STMT STMTS 
            {
              Stmts RESULT =null;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Stmt stmt = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int stmtsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stmtsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stmts stmts = (Stmts)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Stmts1(stmt,stmts); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STMTS",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // STMTBLOCK ::= LC DEFS STMTS RC 
            {
              Stmtblock RESULT =null;
		int defsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int defsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Defs defs = (Defs)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int stmtsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int stmtsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Stmts stmts = (Stmts)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Stmtblock(defs, stmts); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STMTBLOCK",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // PARA ::= SPEC VAR 
            {
              Para RESULT =null;
		int specleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int specright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Spec spec = (Spec)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Var var = (Var)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Para(spec, var); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARA",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // PARAS ::= 
            {
              Paras RESULT =null;
		 RESULT = new Paras3(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAS",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // PARAS ::= PARA 
            {
              Paras RESULT =null;
		int paraleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pararight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Para para = (Para)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Paras2(para); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAS",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // PARAS ::= PARA COMMA PARAS 
            {
              Paras RESULT =null;
		int paraleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pararight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Para para = (Para)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int parasleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int parasright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Paras paras = (Paras)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Paras1(para, paras); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAS",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // FUNC ::= ID LP PARAS RP 
            {
              Func RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int parasleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int parasright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Paras paras = (Paras)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Func(symbol(id),paras); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNC",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // VAR ::= VAR LB INT RB 
            {
              Var RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Var var = (Var)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int numleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer num = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Var2(var, num.intValue()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VAR",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // VAR ::= ID 
            {
              Var RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Var1(symbol(id)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VAR",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // OPTTAG ::= 
            {
              Opttag RESULT =null;
		 RESULT = new Opttag2(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPTTAG",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // OPTTAG ::= ID 
            {
              Opttag RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Opttag1(symbol(id)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPTTAG",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // STSPEC ::= STRUCT ID 
            {
              Stspec RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Stspec2(symbol(id)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STSPEC",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // STSPEC ::= STRUCT OPTTAG LC DEFS RC 
            {
              Stspec RESULT =null;
		int opttagleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int opttagright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Opttag opttag = (Opttag)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int defsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int defsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Defs defs = (Defs)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Stspec1(opttag, defs); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STSPEC",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SPEC ::= STSPEC 
            {
              Spec RESULT =null;
		int stspecleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stspecright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stspec stspec = (Stspec)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Spec2(stspec); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SPEC",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SPEC ::= TYPE 
            {
              Spec RESULT =null;
		 RESULT = new Spec1(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SPEC",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // EXTVARS ::= 
            {
              Extvars RESULT =null;
		 RESULT = new Extvars3(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXTVARS",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // EXTVARS ::= DEC COMMA EXTVARS 
            {
              Extvars RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int decright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Dec dec = (Dec)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int extvarsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int extvarsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Extvars extvars = (Extvars)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Extvars2(dec, extvars); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXTVARS",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // EXTVARS ::= DEC 
            {
              Extvars RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dec dec = (Dec)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Extvars1(dec); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXTVARS",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // EXTDEF ::= SPEC FUNC STMTBLOCK 
            {
              Extdef RESULT =null;
		int specleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int specright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Spec spec = (Spec)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int funcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Func func = (Func)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int stmtblockleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stmtblockright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stmtblock stmtblock = (Stmtblock)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Extdef2(spec, func, stmtblock); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXTDEF",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // EXTDEF ::= SPEC EXTVARS SEMI 
            {
              Extdef RESULT =null;
		int specleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int specright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Spec spec = (Spec)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int extvarsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int extvarsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Extvars extvars = (Extvars)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Extdef1(spec, extvars); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXTDEF",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // EXTDEFS ::= 
            {
              Extdefs RESULT =null;
		 RESULT = new Extdefs2(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXTDEFS",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // EXTDEFS ::= EXTDEF EXTDEFS 
            {
              Extdefs RESULT =null;
		int extdefleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int extdefright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Extdef extdef = (Extdef)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int extdefsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int extdefsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Extdefs extdefs = (Extdefs)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Extdefs1(extdef,extdefs); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXTDEFS",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // PROGRAM ::= EXTDEFS 
            {
              Program RESULT =null;
		int extdefsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int extdefsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Extdefs extdefs = (Extdefs)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Program(extdefs); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PROGRAM",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= PROGRAM EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

